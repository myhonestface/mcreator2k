import org.apache.tools.ant.taskdefs.condition.Os

createExe {
    outfile = '2k-creator.exe'
    mainClassName = 'net.mcreator.Launcher'
    dontWrapJar = true
    copyConfigurable = []
    classpath = [
            "./lib/*"
    ]
    jvmOptions = [
            "--add-opens=java.base/java.lang=ALL-UNNAMED"
    ]
    libraryDir = "null"
    stayAlive = true
    jdkPreference = "jdkOnly"
    bundledJrePath = 'jdk'

    bundledJre64Bit = true
    jreRuntimeBits = 64

    errTitle = '2K Creator'
    supportUrl = 'https://discord.gg/AU23jqae2B'

    fileDescription = "2K Creator " + (String) project.mcreatorconf.getProperty('mcreator')
    productName = "2K Creator"
    companyName = "2K Studio"

    icon = "${projectDir}/src/main/resources/net/mcreator/ui/res/icon.ico"
}

tasks.register('exportWin64', Copy.class) {
    dependsOn downloadJDKWin64
    dependsOn createExe
    dependsOn jar
    dependsOn exportPlugins

    into 'build/export/win64'
    into('') {
        from file('LICENSE.txt')
        from file('platform/windows/2k-creator.bat')
        from file('build/launch4j/2k-creator.exe')
    }
    into('lib') {
        from 'build/libs'
        from configurations.export
        from configurations.win64
    }
    into('plugins') { from 'build/plugins/' }
    into('license') { from 'license' }
    into('jdk') { from 'jdk/jdk17_win_64' }
}

tasks.register('exportWindowsZip', Zip.class) {
    dependsOn exportWin64

    from 'build/export/win64/'
    into '2K Creator' + (String) project.mcreatorconf.getProperty('mcreator').replace(".", "").replace(" ", "")
    destinationDirectory = file('build/export/')
    archiveFileName = '2K Creator ' + (String) project.mcreatorconf.getProperty('mcreator') + ' Windows 64bit.zip'
}

tasks.register('buildInstallerWin64', Exec.class) {
    dependsOn downloadNSIS
    dependsOn exportWin64

    doFirst {
        copy {
            from file('platform/windows/installer/install.nsi') into 'build/export' rename('install.nsi', 'install64.nsi') filter { line ->
                line.replace('%year%', new Date().format('yyyy'))
                        .replace('%build%', project.builddate)
                        .replace('%mcreator%', (String) project.mcreatorconf.getProperty('mcreator'))
            }
        }
    }

    def nsis_binary
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        nsis_binary = projectDir.toString() + '/build/tools/nsis/makensis'
    } else {
        nsis_binary = 'makensis'
    }
    commandLine nsis_binary, 'build/export/install64.nsi'

    doLast { delete 'build/export/install64.nsi' }
}

tasks.register('exportWindows') {
    group 'export'

    dependsOn exportWindowsZip

    // Add installer only if this is not a snapshot build (and not MacOS that does not support makensis)
    if (!project.snapshot && !Os.isFamily(Os.FAMILY_MAC)) {
        dependsOn buildInstallerWin64
    }

    doLast {
        delete 'build/export/win64'
    }
}
